import csv
import uuid
import qrcode
import os
import shutil
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.utils import formataddr
import pandas as pd
from pdf2image import convert_from_path


def dogrulama_kodu_olustur_ekle():
    # dogrulama kodu oluÅŸturma
    satirlar = []
    zaten_var = 0
    with open("liste/etkinlik.csv", encoding="utf-8") as dosya:
        okundu = csv.reader(dosya)
        for satir in okundu:
            # **Benzersiz doÄŸrulama kodu oluÅŸtur**
            doÄŸrulama_kodu = str(uuid.uuid4())  # Benzersiz bir UUID oluÅŸtur
            if len(satir) >= 7 and satir[0] != "id":
                zaten_var = 1
            elif satir[0] == "id":
                satirlar.append(satir)
                continue
            else:
                satir[1] = satir[1].capitalize()
                satir[2] = satir[2].capitalize()
                satir.append(doÄŸrulama_kodu)
                satirlar.append(satir)
    if zaten_var == 1:
        print("dogrulama kodu mevcut olduÄŸu iÃ§in tekrar oluÅŸturulmadÄ±")
    else:
        with open("liste/etkinlik.csv", "w", newline='', encoding="utf-8") as dosya:
            yazilacak = csv.writer(dosya)
            yazilacak.writerows(satirlar)
        print("dogrulama kodu baÅŸarÄ±yla eklendi")


def qr_olustur():
    # QR kodlarÄ±nÄ±n kaydedileceÄŸi klasÃ¶rÃ¼n varlÄ±ÄŸÄ±nÄ± kontrol et
    klasor_yolu = "qr_foto"
    os.makedirs(klasor_yolu, exist_ok=True)  # KlasÃ¶r yoksa oluÅŸtur
    basari = 0
    with open("liste/etkinlik.csv", encoding="utf-8-sig") as dosya:
        okundu = csv.reader(dosya)
        for satir in okundu:
            if satir[0] != "id":

                dogrulama_kodu = satir[6]  # 6. sÃ¼tun (index 5) doÄŸrulama kodu

                dosya_yolu = os.path.join(klasor_yolu, f"{dogrulama_kodu}.png")
                if not os.path.exists(dosya_yolu):
                    # QR kodu iÃ§in veriyi belirleyin
                    data = f"https://btk-kulup.marmara.edu.tr/dosya/kulup/btk/sertfikalar/{dogrulama_kodu}.pdf"

                    # QR kodu oluÅŸturma
                    qr = qrcode.QRCode(
                        version=1,  # QR kodunun boyutu (1-40 arasÄ±)
                        error_correction=qrcode.constants.ERROR_CORRECT_L,  # Hata dÃ¼zeltme seviyesi
                        box_size=10,  # Her bir kutu boyutunun piksel cinsinden bÃ¼yÃ¼klÃ¼ÄŸÃ¼
                        border=0,  # SÄ±nÄ±r kalÄ±nlÄ±ÄŸÄ±
                    )

                    # Veriyi QR koda ekleyin
                    qr.add_data(data)
                    qr.make(fit=True)

                    # GÃ¶rsel oluÅŸturma
                    img = qr.make_image(fill='black', back_color='white')

                    # QR kodunu qr_foto klasÃ¶rÃ¼ne kaydetme
                    dosya_yolu = os.path.join(klasor_yolu, f"{dogrulama_kodu}.png")
                    img.save(dosya_yolu)

                    basari = 1
        if basari == 1:
            print("QR kodlarÄ± baÅŸarÄ±yla oluÅŸturuldu.")
        else:
            print("QR kodlarÄ± mevcut olduÄŸu iÃ§in oluÅŸturulmadÄ±")


def pdf_olusturma():
    with open("liste/etkinlik.csv", encoding="utf-8") as dosya:
        okundu = csv.reader(dosya)
        for satir in okundu:
            print(satir)
            if satir[0] != "id":

                dogrulama_kodu = satir[6]
                isim_soyisim = satir[1] + " " + satir[2]
                dosya_ismi = dogrulama_kodu + ".pdf"
                metin = (f'BiliÅŸim Teknolojileri KulÃ¼bÃ¼ (MITC) tarafÄ±ndan\n'
                         f'{satir[3]} tarihinde gerÃ§ekleÅŸtirilen\n'
                         f'"{satir[5]}" etkinliÄŸine katÄ±lÄ±mÄ±nÄ±zdan dolayÄ±\n'
                         f'bu belgeyi almaya hak kazandÄ±nÄ±z.')

                klasor_adi = "sertifikalar"
                if not os.path.exists(klasor_adi):
                    os.makedirs(klasor_adi)

                pdf_yolu = os.path.join(klasor_adi, dosya_ismi)

                dosya_basligi = dosya_ismi
                resim = "arkaplan/MITC_Katilim.png"
                qr_dosya_yolu = f"qr_foto/{dogrulama_kodu}.png"

                pdf = canvas.Canvas(pdf_yolu, pagesize=(1125, 870))
                pdf.setTitle(dosya_basligi)

                genislik, yukseklik = pdf._pagesize
                pdf.drawImage(resim, 0, 0, width=genislik, height=yukseklik)

                pdfmetrics.registerFont(TTFont("aaa", "font/Caladea-Regular.ttf"))

                pdf.setFont("aaa", 65)
                pdf.setFillColor("#093B6E")
                pdf.drawCentredString(genislik / 2, (yukseklik / 2) - 25, isim_soyisim)

                satirlar = metin.split("\n")
                font_boyutu = 30
                satir_araligi = font_boyutu + 5
                metin_yuksekligi = len(satirlar) * satir_araligi

                metin_baslangic_y = (yukseklik / 2) - 50 - (metin_yuksekligi / 2)
                y_koordinatÄ± = metin_baslangic_y
                pdf.setFont("aaa", font_boyutu)
                for satir in satirlar:
                    pdf.drawCentredString(genislik / 2, y_koordinatÄ±, satir)
                    y_koordinatÄ± -= satir_araligi

                pdf.drawImage(qr_dosya_yolu, 1010, 37, width=75, height=75)

                pdf.save()
        print("sertfikalar baÅŸarÄ±yla oluÅŸturuldu")


def qr_sil():
    klasor_yolu = "qr_foto"
    if not os.path.exists(klasor_yolu):
        print("silinecek klasÃ¶r bulunamadÄ±")
    else:
        shutil.rmtree(klasor_yolu)
        print("qr klasÃ¶rÃ¼ baÅŸarÄ±yla silindi")


def pdf_png_donusturme():
    with open("liste/etkinlik.csv") as dosya:
        okundu = csv.reader(dosya)
        for satir in okundu:
            if satir[0] != "id":
                dogrulama_kodu = satir[6]

                # PDF dosyasÄ±nÄ±n yolu
                pdf_path = f'sertifikalar/{dogrulama_kodu}.pdf'

                # Poppler'Ä±n bin klasÃ¶rÃ¼nÃ¼n tam yolunu belirtin
                poppler_path = r'C:\Users\Acer\Desktop\sertfika\.venv\Lib\site-packages\poppler-24.08.0\Library\bin'

                # PDF'yi sayfalara ayÄ±rarak PNG'ye dÃ¶nÃ¼ÅŸtÃ¼rme
                pages = convert_from_path(pdf_path, 300, poppler_path=poppler_path)

                # Ä°lk sayfayÄ± al
                image = pages[0]
                if not os.path.exists("png_donusturme"):
                    os.mkdir("png_donusturme")
                image.save(f'png_donusturme/{dogrulama_kodu}.png', 'PNG')
    print("pdfler png formatÄ±na Ã§evrildi")


def tekrar_pdf_olustur():
    with open("liste/etkinlik.csv") as dosya:
        okundu = csv.reader(dosya)
        for satir in okundu:
            if satir[0] != "id":
                dogrulama_kodu = satir[6]
                if not os.path.exists("sertfikalar_v2"):
                    os.mkdir("sertfikalar_v2")
                # PDF dosyasÄ±nÄ±n adÄ± ve arka plan resmi
                pdf_filename = f"sertfikalar_v2/{dogrulama_kodu}.pdf"
                background_image = f"png_donusturme/{dogrulama_kodu}.png"

                # PDF dosyasÄ±nÄ± oluÅŸturuyoruz
                c = canvas.Canvas(pdf_filename, pagesize=(1125, 870))
                # Resmi arka plana yerleÅŸtiriyoruz (sayfa boyutuna uyacak ÅŸekilde)
                c.drawImage(background_image, 0, 0, width=1125, height=870)

                # PDF dosyasÄ±nÄ± kaydediyoruz
                c.save()

    print("sertfikalar_v2 oluÅŸturuldu")


def png_sil():
    klasor_yolu = "png_donusturme"
    if not os.path.exists(klasor_yolu):
        print("silinecek klasÃ¶r yok")
    else:
        shutil.rmtree(klasor_yolu)
        print("png dosyalarÄ± silindi")


def mail_gonder_v1():
    # Gmail SMTP sunucu bilgileri
    SMTP_SERVER = "smtp.gmail.com"
    SMTP_PORT = 587  # TLS portu

    # GÃ¶nderici bilgileri
    GONDEREN_EMAIL = "nailerkilicoglu6634@gmail.com"
    GONDEREN_SIFRE = "okbj lcyh qndw skzi"
    GONDEREN_ADI = "BiliÅŸim Teknolojileri KulÃ¼bÃ¼ (MITC)"

    # SMTP sunucusuna tek seferde baÄŸlan
    try:
        mail = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        mail.starttls()
        mail.login(GONDEREN_EMAIL, GONDEREN_SIFRE)

        with open("liste/etkinlik.csv", encoding="utf-8") as dosya:
            okundu = csv.reader(dosya)
            for satir in okundu:
                if satir[0] != "id":

                    isim_soyisim = satir[1] + " " + satir[2]
                    mail_adres = satir[4]
                    etkinlik = satir[5]
                    dogrulama_kodu = satir[6]
                    dosya_adi = dogrulama_kodu + ".pdf"
                    pdf_dosyasi = f"sertifikalar/{dosya_adi}"  # Her katÄ±lÄ±mcÄ±nÄ±n sertifikasÄ±

                    # E-posta iÃ§eriÄŸi
                    mesaj = MIMEMultipart()
                    mesaj["From"] = formataddr((GONDEREN_ADI, GONDEREN_EMAIL))
                    mesaj["To"] = mail_adres
                    mesaj["Subject"] = f"{etkinlik} EtkinliÄŸi KatÄ±lÄ±m SertifikanÄ±z"

                    # E-posta gÃ¶vdesi
                    govde = f"""Merhaba {isim_soyisim},

        "{etkinlik}" etkinliÄŸimize katÄ±lÄ±mÄ±nÄ±z iÃ§in teÅŸekkÃ¼r ederiz! AÅŸaÄŸÄ±da, bu etkinliÄŸe gÃ¶sterdiÄŸiniz ilgi ve katkÄ± iÃ§in size Ã¶zel olarak hazÄ±rlanmÄ±ÅŸ katÄ±lÄ±m sertifikanÄ±zÄ± bulabilirsiniz.

        Bu sertifika, Ã¶ÄŸrenmeye ve geliÅŸmeye olan baÄŸlÄ±lÄ±ÄŸÄ±nÄ±zÄ±n bir gÃ¶stergesi olup, kariyer yolculuÄŸunuzda bir adÄ±m daha ileriye taÅŸÄ±yacaktÄ±r.

        Gelecek etkinliklerimizde de sizi aramÄ±zda gÃ¶rmekten mutluluk duyarÄ±z!

        BaÅŸarÄ±larÄ±nÄ±zÄ±n devamÄ±nÄ± dileriz.

        SaygÄ±larÄ±mÄ±zla,
        Marmara BiliÅŸim Teknolojileri KulÃ¼bÃ¼
        """
                    mesaj.attach(MIMEText(govde, "plain"))

                    # **ğŸ“‚ PDF ekleme**
                    try:
                        with open(pdf_dosyasi, "rb") as pdf:
                            pdf_icerik = MIMEApplication(pdf.read(), _subtype="pdf")

                            # ğŸ“Œ **Dosya adÄ± aÃ§Ä±kÃ§a belirtiliyor**
                            dosya_adi = dogrulama_kodu + ".pdf"
                            pdf_icerik.add_header("Content-Disposition", f'attachment; filename="{dosya_adi}"')

                            mesaj.attach(pdf_icerik)
                    except FileNotFoundError:
                        print(f"HATA: {pdf_dosyasi} bulunamadÄ±, e-posta ek olarak PDF olmadan gÃ¶nderiliyor.")

                    # E-postayÄ± gÃ¶nder
                    mail.sendmail(GONDEREN_EMAIL, mail_adres, mesaj.as_string())
                    print(f"{isim_soyisim} iÃ§in e-posta baÅŸarÄ±yla gÃ¶nderildi!")

        # BaÄŸlantÄ±yÄ± kapat
        mail.quit()
        print("TÃ¼m e-postalar baÅŸarÄ±yla gÃ¶nderildi!")

    except Exception as e:
        print(f"E-posta gÃ¶nderme hatasÄ±: {e}")


def mail_gonder_v2():
    # Gmail SMTP sunucu bilgileri
    SMTP_SERVER = "smtp.gmail.com"
    SMTP_PORT = 587  # TLS portu

    # GÃ¶nderici bilgileri
    GONDEREN_EMAIL = "nailerkilicoglu6634@gmail.com"
    GONDEREN_SIFRE = "okbj lcyh qndw skzi"
    GONDEREN_ADI = "BiliÅŸim Teknolojileri KulÃ¼bÃ¼ (MITC)"

    # SMTP sunucusuna tek seferde baÄŸlan
    try:
        mail = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        mail.starttls()
        mail.login(GONDEREN_EMAIL, GONDEREN_SIFRE)

        with open("liste/etkinlik.csv", encoding="utf-8") as dosya:
            okundu = csv.reader(dosya)
            for satir in okundu:
                if satir[0] != "id":

                    isim_soyisim = satir[1] + " " + satir[2]
                    mail_adres = satir[4]
                    etkinlik = satir[5]
                    dogrulama_kodu = satir[6]
                    dosya_adi = dogrulama_kodu + ".pdf"
                    pdf_dosyasi = f"sertifikalar_v2/{dosya_adi}"  # Her katÄ±lÄ±mcÄ±nÄ±n sertifikasÄ±

                    # E-posta iÃ§eriÄŸi
                    mesaj = MIMEMultipart()
                    mesaj["From"] = formataddr((GONDEREN_ADI, GONDEREN_EMAIL))
                    mesaj["To"] = mail_adres
                    mesaj["Subject"] = f"{etkinlik} EtkinliÄŸi KatÄ±lÄ±m SertifikanÄ±z"

                    # E-posta gÃ¶vdesi
                    govde = f"""Merhaba {isim_soyisim},

        "{etkinlik}" etkinliÄŸimize katÄ±lÄ±mÄ±nÄ±z iÃ§in teÅŸekkÃ¼r ederiz! AÅŸaÄŸÄ±da, bu etkinliÄŸe gÃ¶sterdiÄŸiniz ilgi ve katkÄ± iÃ§in size Ã¶zel olarak hazÄ±rlanmÄ±ÅŸ katÄ±lÄ±m sertifikanÄ±zÄ± bulabilirsiniz.

        Bu sertifika, Ã¶ÄŸrenmeye ve geliÅŸmeye olan baÄŸlÄ±lÄ±ÄŸÄ±nÄ±zÄ±n bir gÃ¶stergesi olup, kariyer yolculuÄŸunuzda bir adÄ±m daha ileriye taÅŸÄ±yacaktÄ±r.

        Gelecek etkinliklerimizde de sizi aramÄ±zda gÃ¶rmekten mutluluk duyarÄ±z!

        BaÅŸarÄ±larÄ±nÄ±zÄ±n devamÄ±nÄ± dileriz.

        SaygÄ±larÄ±mÄ±zla,
        Marmara BiliÅŸim Teknolojileri KulÃ¼bÃ¼
        """
                    mesaj.attach(MIMEText(govde, "plain"))

                    # **ğŸ“‚ PDF ekleme**
                    try:
                        with open(pdf_dosyasi, "rb") as pdf:
                            pdf_icerik = MIMEApplication(pdf.read(), _subtype="pdf")

                            # ğŸ“Œ **Dosya adÄ± aÃ§Ä±kÃ§a belirtiliyor**
                            dosya_adi = dogrulama_kodu + ".pdf"
                            pdf_icerik.add_header("Content-Disposition", f'attachment; filename="{dosya_adi}"')

                            mesaj.attach(pdf_icerik)
                    except FileNotFoundError:
                        print(f"HATA: {pdf_dosyasi} bulunamadÄ±, e-posta ek olarak PDF olmadan gÃ¶nderiliyor.")

                    # E-postayÄ± gÃ¶nder
                    mail.sendmail(GONDEREN_EMAIL, mail_adres, mesaj.as_string())
                    print(f"{isim_soyisim} iÃ§in e-posta baÅŸarÄ±yla gÃ¶nderildi!")

        # BaÄŸlantÄ±yÄ± kapat
        mail.quit()
        print("TÃ¼m e-postalar baÅŸarÄ±yla gÃ¶nderildi!")

    except Exception as e:
        print(f"E-posta gÃ¶nderme hatasÄ±: {e}")


def csv_excel_donustur():
    # CSV dosyasÄ±nÄ± okuma
    csv_file = 'liste/etkinlik.csv'  # CSV dosyanÄ±zÄ±n adÄ± ve yolu
    df = pd.read_csv(csv_file)

    # DataFrame'i Excel dosyasÄ±na kaydetme
    excel_file = 'liste/etkinlik.xlsx'  # OluÅŸacak Excel dosyasÄ±nÄ±n adÄ± ve yolu
    df.to_excel(excel_file, index=False, engine='openpyxl')

    print(f"{csv_file} baÅŸarÄ±yla {excel_file} dosyasÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼ldÃ¼.")

# dogrulama_kodu_olustur_ekle()
# qr_olustur()
# pdf_olusturma()
# qr_sil()
# pdf_png_donusturme()
# tekrar_pdf_olustur()
# png_sil()
# mail_gonder_v1()
# mail_gonder_v2()
# csv_excel_donustur()